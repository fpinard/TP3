
#ifndef CHARACTER_H__
#define CHARACTER_H__

using namespace std;

// ===========================================================================
//                                  Includes
// ===========================================================================


class Character {
 public :
  // =========================================================================
  //                               Constructors
  // =========================================================================
  Character();
  Character(const Character& model);

  // =========================================================================
  //                                Destructor
  // =========================================================================
  virtual ~Character();
 
  // =========================================================================
  //                                  Getters
  // =========================================================================
  inline float speed() const;

  // =========================================================================
  //                                  Setters
  // =========================================================================

  // =========================================================================
  //                                 Operators
  // =========================================================================
  inline virtual const Character &operator=(const Character&);
  inline friend ostream& operator<<(ostream&,const Character&);
  // =========================================================================
  //                              Public Methods
  // =========================================================================
  virtual void Accelerate();
  virtual void Break();
  virtual void WhatAmI() const=0;

protected :
  // =========================================================================
  //                             Protected Methods
  // =========================================================================

  // =========================================================================
  //                                Attributes
  // =========================================================================
  float* speed_;
  float max_speed_;
  static int nb_instances;
};

// ===========================================================================
//                            Getters' definitions
// ===========================================================================
inline float Character::speed() const {
  return *speed_;
}

// ===========================================================================
//                            Setters' definitions
// ===========================================================================

// ===========================================================================
//                           Operators' definitions
// ===========================================================================

inline const Character& Character::operator=(const Character& model){
  *speed_ = *(model.speed_);
  max_speed_ = model.max_speed_;
  return *this;
}
inline ostream& operator<<(ostream& os, const Character& model){
  os <<"Vitesse : " << model.speed()<<endl;
  return os;
}
// ===========================================================================
//                        Inline functions' definition
// ===========================================================================


#endif // CHARACTER_H__
